var Atari2600 =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./dev/App.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dev/App.ts":
/*!********************!*\
  !*** ./dev/App.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RomReader_1 = __webpack_require__(/*! ./RomReader */ \"./dev/RomReader.ts\");\r\nvar RAM_1 = __webpack_require__(/*! ./RAM */ \"./dev/RAM.ts\");\r\nvar TIA_1 = __webpack_require__(/*! ./TIA */ \"./dev/TIA.ts\");\r\nvar PIA_1 = __webpack_require__(/*! ./PIA */ \"./dev/PIA.ts\");\r\nvar App = /** @class */ (function () {\r\n    function App(canvas) {\r\n        this.handleRom = this.handleRom.bind(this);\r\n        TIA_1.TIA.canvas = canvas;\r\n        PIA_1.PIA.initInputs();\r\n    }\r\n    ;\r\n    App.prototype.handleRom = function () {\r\n        var _this = this;\r\n        TIA_1.TIA.nextFrame().then(function () {\r\n            requestAnimationFrame(_this.handleRom);\r\n            console.log('NEW FRAME');\r\n        });\r\n    };\r\n    ;\r\n    App.prototype.processFile = function (file) {\r\n        var _this = this;\r\n        console.log('Reading process started!');\r\n        var reader = new RomReader_1.RomReader(file, function (rom) {\r\n            RAM_1.RAM.readRom(rom);\r\n            _this.handleRom();\r\n        });\r\n    };\r\n    ;\r\n    return App;\r\n}());\r\nexports.App = App;\r\n\n\n//# sourceURL=webpack://Atari2600/./dev/App.ts?");

/***/ }),

/***/ "./dev/CPU.ts":
/*!********************!*\
  !*** ./dev/CPU.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RAM_1 = __webpack_require__(/*! ./RAM */ \"./dev/RAM.ts\");\r\nvar Opcode_1 = __webpack_require__(/*! ./Opcode */ \"./dev/Opcode.ts\");\r\nvar PIA_1 = __webpack_require__(/*! ./PIA */ \"./dev/PIA.ts\");\r\nvar CPU = /** @class */ (function () {\r\n    function CPU() {\r\n    }\r\n    CPU.lock = function () {\r\n        this._locked = true;\r\n    };\r\n    ;\r\n    CPU.unlock = function () {\r\n        this._locked = false;\r\n    };\r\n    ;\r\n    CPU.pulse = function () {\r\n        PIA_1.PIA.tick();\r\n        if (this._locked) {\r\n            return false;\r\n        }\r\n        ;\r\n        if (this._cycle <= 0) {\r\n            try {\r\n                // console.log(RAM.get(Register.PC).toString(16), Register.PC.toString(16));\r\n                this._cycle = Opcode_1.Opcode[RAM_1.RAM.get(RAM_1.Register.PC)]();\r\n            }\r\n            catch (e) {\r\n                console.log('Error', RAM_1.RAM.get(RAM_1.Register.PC).toString(16), RAM_1.Register.PC.toString(16));\r\n                throw e;\r\n            }\r\n            ;\r\n            RAM_1.Register.PC++;\r\n        }\r\n        ;\r\n        this._cycle--;\r\n    };\r\n    ;\r\n    CPU._locked = false;\r\n    CPU._cycle = 0;\r\n    return CPU;\r\n}());\r\nexports.CPU = CPU;\r\n;\r\n\n\n//# sourceURL=webpack://Atari2600/./dev/CPU.ts?");

/***/ }),

/***/ "./dev/Common.ts":
/*!***********************!*\
  !*** ./dev/Common.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Convert = /** @class */ (function () {\r\n    function Convert() {\r\n    }\r\n    Convert.toInt8 = function (val) {\r\n        return new Int8Array([val])[0];\r\n    };\r\n    ;\r\n    Convert.toUint8 = function (val) {\r\n        return val & 0xFF;\r\n    };\r\n    ;\r\n    Convert.toBCD = function (val) {\r\n        return Math.abs((val / 10 << 4) | val % 10) % 100;\r\n    };\r\n    ;\r\n    Convert.toDecBCD = function (val) {\r\n        return ((val >> 4) * 10) + (val & 0x0F);\r\n    };\r\n    ;\r\n    Convert.toBin = function (val) {\r\n        return ('00000000' + (val >>> 0).toString(2)).slice(-8);\r\n    };\r\n    ;\r\n    Convert.toColorArray = function (hex) {\r\n        var c = [];\r\n        hex = hex.replace('#', '');\r\n        c[0] = parseInt(hex.substring(0, 2), 16);\r\n        c[1] = parseInt(hex.substring(2, 4), 16);\r\n        c[2] = parseInt(hex.substring(4, 6), 16);\r\n        return c;\r\n    };\r\n    ;\r\n    return Convert;\r\n}());\r\nexports.Convert = Convert;\r\n;\r\n\n\n//# sourceURL=webpack://Atari2600/./dev/Common.ts?");

/***/ }),

/***/ "./dev/Opcode.ts":
/*!***********************!*\
  !*** ./dev/Opcode.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RAM_1 = __webpack_require__(/*! ./RAM */ \"./dev/RAM.ts\");\r\nvar Common_1 = __webpack_require__(/*! ./Common */ \"./dev/Common.ts\");\r\n// TODO: Memory mirroring\r\n// TODO: Decimal mode for ABD/SBC\r\n// TODO: Check if combined ALU-opcodes work properly\r\nvar Opcode = /** @class */ (function () {\r\n    function Opcode() {\r\n    }\r\n    Opcode.isNextPage = function (pc1, pc2) {\r\n        var left = ('000' + pc1.toString(16)).slice(-4);\r\n        var right = ('000' + pc2.toString(16)).slice(-4);\r\n        return left.charAt(0) != right.charAt(0) || left.charAt(1) != right.charAt(1);\r\n    };\r\n    ;\r\n    Opcode.isZero = function (value) {\r\n        return (value == 0 ? 1 : 0);\r\n    };\r\n    ;\r\n    Opcode.isNegative = function (value) {\r\n        return (Common_1.Convert.toInt8(value) < 0 ? 1 : 0);\r\n    };\r\n    ;\r\n    Opcode.ADC = function (value) {\r\n        var old = RAM_1.Register.A;\r\n        var result = null;\r\n        if (RAM_1.Flag.D) {\r\n            result = Common_1.Convert.toDecBCD(RAM_1.Register.A) + RAM_1.Flag.C + Common_1.Convert.toDecBCD(value);\r\n            RAM_1.Flag.C = (result > 99 ? 1 : 0);\r\n        }\r\n        else {\r\n            result = RAM_1.Register.A + RAM_1.Flag.C + value;\r\n            RAM_1.Flag.C = (result > 0xFF ? 1 : 0);\r\n        }\r\n        ;\r\n        RAM_1.Register.A = Common_1.Convert.toUint8(result);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n        RAM_1.Flag.V = ((~(old ^ RAM_1.RAM.get(RAM_1.Register.PC)) & (old ^ RAM_1.Register.A) & 0x80) == RAM_1.Register.A ? 1 : 0);\r\n    };\r\n    ;\r\n    Opcode.AND = function (value) {\r\n        RAM_1.Register.A = RAM_1.Register.A & value;\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n    };\r\n    ;\r\n    Opcode.ASL = function (address) {\r\n        var value = RAM_1.RAM.read(address);\r\n        var carry = Common_1.Convert.toBin(value).charAt(0);\r\n        value = Common_1.Convert.toUint8(value << 1);\r\n        RAM_1.RAM.write(address, value);\r\n        RAM_1.Flag.Z = this.isZero(value);\r\n        RAM_1.Flag.N = this.isNegative(value);\r\n        RAM_1.Flag.C = parseInt(carry);\r\n    };\r\n    ;\r\n    Opcode.CMP = function (name, value) {\r\n        RAM_1.Flag.Z = (RAM_1.Register[name] == value ? 1 : 0);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register[name] - value);\r\n        RAM_1.Flag.C = (RAM_1.Register[name] - value >= 0 ? 1 : 0);\r\n    };\r\n    ;\r\n    Opcode.CJMP = function (name, value) {\r\n        if (RAM_1.Flag[name] == value) {\r\n            RAM_1.Register.PC++;\r\n            return 2;\r\n        }\r\n        ;\r\n        var num = Common_1.Convert.toInt8(RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 3 + (this.isNextPage(RAM_1.Register.PC, RAM_1.Register.PC += num) ? 1 : 0);\r\n    };\r\n    ;\r\n    Opcode.EOR = function (value) {\r\n        RAM_1.Register.A = RAM_1.Register.A ^ value;\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n    };\r\n    ;\r\n    Opcode.LD = function (name, address) {\r\n        RAM_1.Register[name] = RAM_1.RAM.read(address);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register[name]);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register[name]);\r\n    };\r\n    ;\r\n    Opcode.LSR = function (address) {\r\n        var value = RAM_1.RAM.read(address);\r\n        var carry = Common_1.Convert.toBin(value).charAt(7);\r\n        value = Common_1.Convert.toUint8(value >>> 1);\r\n        RAM_1.RAM.write(address, value);\r\n        RAM_1.Flag.Z = 0;\r\n        RAM_1.Flag.N = this.isNegative(value);\r\n        RAM_1.Flag.C = parseInt(carry);\r\n    };\r\n    ;\r\n    Opcode.next2BYTES = function () {\r\n        var low = RAM_1.RAM.get(++RAM_1.Register.PC);\r\n        var high = RAM_1.RAM.get(++RAM_1.Register.PC);\r\n        return ((high & 0xFF) << 8) | (low & 0xFF);\r\n    };\r\n    ;\r\n    Opcode.ORA = function (value) {\r\n        RAM_1.Register.A = RAM_1.Register.A | value;\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n    };\r\n    ;\r\n    Opcode.ROL = function (address) {\r\n        var value = RAM_1.RAM.read(address);\r\n        var carry = Common_1.Convert.toBin(value).charAt(0);\r\n        value = Common_1.Convert.toUint8(value << 1);\r\n        var rotated = Common_1.Convert.toBin(value).slice(0, -1) + RAM_1.Flag.C.toString();\r\n        RAM_1.RAM.write(address, parseInt(rotated, 2));\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.RAM.get(address));\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.RAM.get(address));\r\n        RAM_1.Flag.C = parseInt(carry);\r\n    };\r\n    ;\r\n    Opcode.ROR = function (address) {\r\n        var addressValue = RAM_1.RAM.read(address);\r\n        var carry = Common_1.Convert.toBin(addressValue).charAt(7);\r\n        var value = Common_1.Convert.toUint8(addressValue >>> 1);\r\n        var rotated = RAM_1.Flag.C.toString() + Common_1.Convert.toBin(value).substring(1);\r\n        RAM_1.RAM.write(address, parseInt(rotated, 2));\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.RAM.get(address));\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.RAM.get(address));\r\n        RAM_1.Flag.C = parseInt(carry);\r\n    };\r\n    ;\r\n    Opcode.POP = function () {\r\n        RAM_1.Register.S = (RAM_1.Register.S + 1) & 0xFF;\r\n        return RAM_1.RAM.get(RAM_1.Register.S);\r\n    };\r\n    ;\r\n    Opcode.PUSH = function (value) {\r\n        RAM_1.RAM.set(RAM_1.Register.S, value);\r\n        RAM_1.Register.S = (RAM_1.Register.S - 1) & 0xFF;\r\n    };\r\n    ;\r\n    Opcode.WORD = function (address) {\r\n        return ((RAM_1.RAM.read(address + 1) & 0xFF) << 8) | (RAM_1.RAM.read(address) & 0xFF);\r\n    };\r\n    ;\r\n    // BRK\r\n    Opcode[0x00] = function () {\r\n        RAM_1.Flag.B = 1;\r\n        var flags = parseInt('' + RAM_1.Flag.N + RAM_1.Flag.V + RAM_1.Flag.U + RAM_1.Flag.B + RAM_1.Flag.D + RAM_1.Flag.I + RAM_1.Flag.Z + RAM_1.Flag.C, 2);\r\n        RAM_1.Flag.I = 1;\r\n        this.PUSH((RAM_1.Register.PC + 1) >> 8);\r\n        this.PUSH(RAM_1.Register.PC + 1);\r\n        this.PUSH(flags);\r\n        RAM_1.Register.PC = RAM_1.RAM.read(0xFFFE);\r\n        return 7;\r\n    };\r\n    ;\r\n    // ORA (nn, X)\r\n    Opcode[0x01] = function () {\r\n        this.ORA(RAM_1.RAM.read(this.WORD(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X)));\r\n        return 6;\r\n    };\r\n    ;\r\n    // NOP nn\r\n    Opcode[0x04] = function () {\r\n        RAM_1.Register.PC++;\r\n        return 3;\r\n    };\r\n    ;\r\n    // ORA nn\r\n    Opcode[0x05] = function () {\r\n        this.ORA(RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC)));\r\n        return 3;\r\n    };\r\n    ;\r\n    // ASL nn\r\n    Opcode[0x06] = function () {\r\n        this.ASL(RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 5;\r\n    };\r\n    ;\r\n    // PHP\r\n    Opcode[0x08] = function () {\r\n        var flags = parseInt('' + RAM_1.Flag.N + RAM_1.Flag.V + 1 + 1 + RAM_1.Flag.D + RAM_1.Flag.I + RAM_1.Flag.Z + RAM_1.Flag.C, 2);\r\n        this.PUSH(flags);\r\n        return 3;\r\n    };\r\n    ;\r\n    // ORA #nn\r\n    Opcode[0x09] = function () {\r\n        this.ORA(RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 2;\r\n    };\r\n    ;\r\n    // ASL A\r\n    Opcode[0x0A] = function () {\r\n        var carry = Common_1.Convert.toBin(RAM_1.Register.A).charAt(0);\r\n        RAM_1.Register.A = Common_1.Convert.toUint8(RAM_1.Register.A << 1);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n        RAM_1.Flag.C = parseInt(carry);\r\n        return 2;\r\n    };\r\n    ;\r\n    // NOP nnnn\r\n    Opcode[0x0C] = function () {\r\n        this.next2BYTES();\r\n        return 4;\r\n    };\r\n    ;\r\n    // ORA nnnn\r\n    Opcode[0x0D] = function () {\r\n        var address = this.next2BYTES();\r\n        this.ORA(RAM_1.RAM.read(address));\r\n        return 4;\r\n    };\r\n    ;\r\n    // ASL nnnn\r\n    Opcode[0x0E] = function () {\r\n        this.ASL(this.next2BYTES());\r\n        return 6;\r\n    };\r\n    ;\r\n    // BPL nnn\r\n    Opcode[0x10] = function () {\r\n        return this.CJMP('N', true);\r\n    };\r\n    ;\r\n    // ORA (nn), Y\r\n    Opcode[0x11] = function () {\r\n        var address = this.WORD(RAM_1.RAM.get(++RAM_1.Register.PC)) + RAM_1.Register.Y;\r\n        this.ORA(RAM_1.RAM.read(address));\r\n        return 5 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // NOP nn, X\r\n    Opcode[0x14] = function () {\r\n        RAM_1.Register.PC++;\r\n        return 4;\r\n    };\r\n    ;\r\n    // ORA nn, X\r\n    Opcode[0x15] = function () {\r\n        this.ORA(RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X));\r\n        return 4;\r\n    };\r\n    ;\r\n    // ASL nn, X\r\n    Opcode[0x16] = function () {\r\n        this.ASL(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X);\r\n        return 6;\r\n    };\r\n    ;\r\n    // CLC\r\n    Opcode[0x18] = function () {\r\n        RAM_1.Flag.C = 0;\r\n        return 2;\r\n    };\r\n    ;\r\n    // ORA nnnn, Y\r\n    Opcode[0x19] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.Y;\r\n        this.ORA(RAM_1.RAM.read(address));\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // NOP nnnn, X\r\n    Opcode[0x1C] = function () {\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, this.next2BYTES() + RAM_1.Register.X) ? 1 : 0);\r\n    };\r\n    ;\r\n    // ORA nnnn, X\r\n    Opcode[0x1D] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.X;\r\n        this.ORA(RAM_1.RAM.read(address));\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // ASL nnnn, X\r\n    Opcode[0x1E] = function () {\r\n        this.ASL(this.next2BYTES() + RAM_1.Register.X);\r\n        return 7;\r\n    };\r\n    ;\r\n    // JSR nnnn\r\n    Opcode[0x20] = function () {\r\n        var address = this.next2BYTES();\r\n        this.PUSH((RAM_1.Register.PC - 1) >> 8);\r\n        this.PUSH(RAM_1.Register.PC - 1);\r\n        RAM_1.Register.PC = address - 1;\r\n        return 6;\r\n    };\r\n    ;\r\n    // BIT nn\r\n    Opcode[0x24] = function () {\r\n        var value = RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        var bin = Common_1.Convert.toBin(value);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A & value);\r\n        RAM_1.Flag.N = (bin.charAt(0) == '1' ? 1 : 0);\r\n        RAM_1.Flag.V = (bin.charAt(1) == '1' ? 1 : 0);\r\n        return 3;\r\n    };\r\n    ;\r\n    // AND nn\r\n    Opcode[0x25] = function () {\r\n        this.AND(RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC)));\r\n        return 3;\r\n    };\r\n    ;\r\n    // ROL nn\r\n    Opcode[0x26] = function () {\r\n        this.ROL(RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 5;\r\n    };\r\n    ;\r\n    // PLP\r\n    Opcode[0x28] = function () {\r\n        var val = Common_1.Convert.toBin(this.POP()).split('');\r\n        RAM_1.Flag.N = parseInt(val[0]);\r\n        RAM_1.Flag.V = parseInt(val[1]);\r\n        RAM_1.Flag.B = parseInt(val[3]);\r\n        RAM_1.Flag.D = parseInt(val[4]);\r\n        RAM_1.Flag.I = parseInt(val[5]);\r\n        RAM_1.Flag.Z = parseInt(val[6]);\r\n        RAM_1.Flag.C = parseInt(val[7]);\r\n        return 4;\r\n    };\r\n    ;\r\n    // AND #nn\r\n    Opcode[0x29] = function () {\r\n        this.AND(RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 2;\r\n    };\r\n    ;\r\n    // ROL A\r\n    Opcode[0x2A] = function () {\r\n        var value = RAM_1.Register.A;\r\n        var carry = Common_1.Convert.toBin(value).charAt(0);\r\n        value = Common_1.Convert.toUint8(value << 1);\r\n        var rotated = Common_1.Convert.toBin(value).slice(0, -1) + RAM_1.Flag.C.toString();\r\n        value = Common_1.Convert.toUint8(parseInt(rotated, 2));\r\n        RAM_1.Register.A = value;\r\n        RAM_1.Flag.Z = this.isZero(value);\r\n        RAM_1.Flag.N = this.isNegative(value);\r\n        RAM_1.Flag.C = parseInt(carry);\r\n        return 2;\r\n    };\r\n    ;\r\n    // BIT nnnn\r\n    Opcode[0x2C] = function () {\r\n        var value = RAM_1.RAM.read(this.next2BYTES());\r\n        var bin = Common_1.Convert.toBin(value);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A & value);\r\n        RAM_1.Flag.N = (bin.charAt(0) == '1' ? 1 : 0);\r\n        RAM_1.Flag.V = (bin.charAt(1) == '1' ? 1 : 0);\r\n        return 4;\r\n    };\r\n    ;\r\n    // AND nnnn\r\n    Opcode[0x2D] = function () {\r\n        this.AND(RAM_1.RAM.read(this.next2BYTES()));\r\n        return 4;\r\n    };\r\n    ;\r\n    // BMI nnn\r\n    Opcode[0x30] = function () {\r\n        return this.CJMP('N', false);\r\n    };\r\n    ;\r\n    // NOP nn, X\r\n    Opcode[0x34] = function () {\r\n        return this[0x14]();\r\n    };\r\n    ;\r\n    // AND nn, X\r\n    Opcode[0x35] = function () {\r\n        this.AND(RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X));\r\n        return 4;\r\n    };\r\n    ;\r\n    // ROL nn, X\r\n    Opcode[0x36] = function () {\r\n        this.ROL(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X);\r\n        return 6;\r\n    };\r\n    ;\r\n    // SEC\r\n    Opcode[0x38] = function () {\r\n        RAM_1.Flag.C = 1;\r\n        return 2;\r\n    };\r\n    ;\r\n    // AND nnnn, Y\r\n    Opcode[0x39] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.Y;\r\n        this.AND(RAM_1.RAM.read(address));\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // NOP nnnn, X\r\n    Opcode[0x3C] = function () {\r\n        return this[0x1C]();\r\n    };\r\n    ;\r\n    // AND nnnn, X\r\n    Opcode[0x3D] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.X;\r\n        this.AND(RAM_1.RAM.read(address));\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // NOP nn\r\n    Opcode[0x44] = function () {\r\n        return this[0x04]();\r\n    };\r\n    ;\r\n    // EOR nn\r\n    Opcode[0x45] = function () {\r\n        this.EOR(RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC)));\r\n        return 3;\r\n    };\r\n    ;\r\n    // LSR nn\r\n    Opcode[0x46] = function () {\r\n        this.LSR(RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 5;\r\n    };\r\n    ;\r\n    // PHA\r\n    Opcode[0x48] = function () {\r\n        this.PUSH(RAM_1.Register.A);\r\n        return 3;\r\n    };\r\n    ;\r\n    // EOR #nn\r\n    Opcode[0x49] = function () {\r\n        this.EOR(RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 2;\r\n    };\r\n    ;\r\n    // LSR A\r\n    Opcode[0x4A] = function () {\r\n        var carry = Common_1.Convert.toBin(RAM_1.Register.A).charAt(7);\r\n        RAM_1.Register.A = Common_1.Convert.toUint8(RAM_1.Register.A >>> 1);\r\n        RAM_1.Flag.Z = 0;\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n        RAM_1.Flag.C = parseInt(carry);\r\n        return 2;\r\n    };\r\n    ;\r\n    // ALR #nn\r\n    Opcode[0x4B] = function () {\r\n        var bin = Common_1.Convert.toBin(RAM_1.Register.A & RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        RAM_1.Register.A = (RAM_1.Register.A & RAM_1.RAM.get(RAM_1.Register.PC)) >>> 1;\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n        RAM_1.Flag.C = (bin.charAt(7) == '1' ? 1 : 0);\r\n        return 2;\r\n    };\r\n    ;\r\n    // JMP nnnn\r\n    Opcode[0x4C] = function () {\r\n        var address = this.next2BYTES();\r\n        RAM_1.Register.PC = address - 1;\r\n        return 3;\r\n    };\r\n    ;\r\n    // LSR nnnn\r\n    Opcode[0x4E] = function () {\r\n        this.LSR(this.next2BYTES());\r\n        return 6;\r\n    };\r\n    ;\r\n    // BVC nnn\r\n    Opcode[0x50] = function () {\r\n        return this.CJMP('V', true);\r\n    };\r\n    ;\r\n    // NOP nn, X\r\n    Opcode[0x54] = function () {\r\n        return this[0x14]();\r\n    };\r\n    ;\r\n    // EOR nn, X\r\n    Opcode[0x55] = function () {\r\n        this.EOR(RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X));\r\n        return 4;\r\n    };\r\n    ;\r\n    // LSR nn, X\r\n    Opcode[0x56] = function () {\r\n        this.LSR(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X);\r\n        return 6;\r\n    };\r\n    ;\r\n    // CLI\r\n    Opcode[0x58] = function () {\r\n        RAM_1.Flag.I = 0;\r\n        return 2;\r\n    };\r\n    ;\r\n    // EOR nnnn, Y\r\n    Opcode[0x59] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.Y;\r\n        this.EOR(RAM_1.RAM.read(address));\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // NOP nnnn, X\r\n    Opcode[0x5C] = function () {\r\n        return this[0x1C]();\r\n    };\r\n    ;\r\n    // EOR nnnn, X\r\n    Opcode[0x5D] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.X;\r\n        this.EOR(RAM_1.RAM.read(address));\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // RTS\r\n    Opcode[0x60] = function () {\r\n        RAM_1.Register.PC = this.POP() + 1;\r\n        RAM_1.Register.PC += this.POP() << 8;\r\n        return 6;\r\n    };\r\n    ;\r\n    // NOP nn\r\n    Opcode[0x64] = function () {\r\n        return this[0x04]();\r\n    };\r\n    ;\r\n    // ADC nn\r\n    Opcode[0x65] = function () {\r\n        this.ADC(RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC)));\r\n        return 3;\r\n    };\r\n    ;\r\n    // ROR nn\r\n    Opcode[0x66] = function () {\r\n        this.ROR(RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 5;\r\n    };\r\n    ;\r\n    // PLA\r\n    Opcode[0x68] = function () {\r\n        RAM_1.Register.A = this.POP();\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n        return 4;\r\n    };\r\n    ;\r\n    // ADC #nn\r\n    Opcode[0x69] = function () {\r\n        this.ADC(RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 2;\r\n    };\r\n    ;\r\n    // ROR A\r\n    Opcode[0x6A] = function () {\r\n        var carry = Common_1.Convert.toBin(RAM_1.Register.A).charAt(7);\r\n        var value = Common_1.Convert.toUint8(RAM_1.Register.A >>> 1);\r\n        var rotated = RAM_1.Flag.C.toString() + Common_1.Convert.toBin(value).substring(1);\r\n        RAM_1.Register.A = Common_1.Convert.toUint8(parseInt(rotated, 2));\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n        RAM_1.Flag.C = parseInt(carry);\r\n        return 2;\r\n    };\r\n    ;\r\n    // JMP (nnnn)\r\n    Opcode[0x6C] = function () {\r\n        var address = this.next2BYTES();\r\n        var low = RAM_1.RAM.read(address);\r\n        var high = ((address & 0xFF) == 0xFF ? RAM_1.RAM.read(address - 0xFF) : RAM_1.RAM.read(address + 1));\r\n        var value = (((high & 0xFF) << 8) | (low & 0xFF));\r\n        RAM_1.Register.PC = value - 1;\r\n        return 5;\r\n    };\r\n    ;\r\n    // ADC nnnn\r\n    Opcode[0x6D] = function () {\r\n        this.ADC(RAM_1.RAM.read(this.next2BYTES()));\r\n        return 4;\r\n    };\r\n    ;\r\n    // BVS nnn\r\n    Opcode[0x70] = function () {\r\n        return this.CJMP('V', false);\r\n    };\r\n    ;\r\n    // NOP nn, X\r\n    Opcode[0x74] = function () {\r\n        return this[0x14]();\r\n    };\r\n    ;\r\n    // ADC nn, X\r\n    Opcode[0x75] = function () {\r\n        this.ADC(RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X));\r\n        return 4;\r\n    };\r\n    ;\r\n    // ROR nn, X\r\n    Opcode[0x76] = function () {\r\n        this.ROR(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X);\r\n        return 6;\r\n    };\r\n    ;\r\n    // SEI\r\n    Opcode[0x78] = function () {\r\n        RAM_1.Flag.I = 1;\r\n        return 2;\r\n    };\r\n    ;\r\n    // ADC nnnn, Y\r\n    Opcode[0x79] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.Y;\r\n        this.ADC(RAM_1.RAM.read(address));\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // NOP nnnn, X\r\n    Opcode[0x7C] = function () {\r\n        return this[0x1C]();\r\n    };\r\n    ;\r\n    // ADC nnnn, X\r\n    Opcode[0x7D] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.X;\r\n        this.ADC(RAM_1.RAM.read(address));\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // NOP #nn\r\n    Opcode[0x80] = function () {\r\n        RAM_1.Register.PC++;\r\n        return 2;\r\n    };\r\n    ;\r\n    // NOP #nn\r\n    Opcode[0x82] = function () {\r\n        return this[0x80]();\r\n    };\r\n    ;\r\n    // STY nn\r\n    Opcode[0x84] = function () {\r\n        RAM_1.RAM.write(RAM_1.RAM.get(++RAM_1.Register.PC), RAM_1.Register.Y);\r\n        return 3;\r\n    };\r\n    ;\r\n    // STA nn\r\n    Opcode[0x85] = function () {\r\n        RAM_1.RAM.write(RAM_1.RAM.get(++RAM_1.Register.PC), RAM_1.Register.A);\r\n        return 3;\r\n    };\r\n    ;\r\n    // STX nn\r\n    Opcode[0x86] = function () {\r\n        RAM_1.RAM.write(RAM_1.RAM.get(++RAM_1.Register.PC), RAM_1.Register.X);\r\n        return 3;\r\n    };\r\n    ;\r\n    // DEY\r\n    Opcode[0x88] = function () {\r\n        RAM_1.Register.Y = Common_1.Convert.toUint8(RAM_1.Register.Y - 1);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.Y);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.Y);\r\n        return 2;\r\n    };\r\n    ;\r\n    // NOP #nn\r\n    Opcode[0x89] = function () {\r\n        return this[0x80]();\r\n    };\r\n    ;\r\n    // TXA\r\n    Opcode[0x8A] = function () {\r\n        RAM_1.Register.A = RAM_1.Register.X;\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n        return 2;\r\n    };\r\n    ;\r\n    // STY nnnn\r\n    Opcode[0x8C] = function () {\r\n        RAM_1.RAM.write(this.next2BYTES(), RAM_1.Register.Y);\r\n        return 4;\r\n    };\r\n    ;\r\n    // STA nnnn\r\n    Opcode[0x8D] = function () {\r\n        RAM_1.RAM.write(this.next2BYTES(), RAM_1.Register.A);\r\n        return 4;\r\n    };\r\n    ;\r\n    // STX nnnn\r\n    Opcode[0x8E] = function () {\r\n        RAM_1.RAM.write(this.next2BYTES(), RAM_1.Register.X);\r\n        return 4;\r\n    };\r\n    ;\r\n    // BCC/BLT nnn\r\n    Opcode[0x90] = function () {\r\n        return this.CJMP('C', true);\r\n    };\r\n    ;\r\n    // STA (nn), Y\r\n    Opcode[0x91] = function () {\r\n        RAM_1.RAM.write(this.WORD(RAM_1.RAM.get(++RAM_1.Register.PC)) + RAM_1.Register.Y, RAM_1.Register.A);\r\n        return 6;\r\n    };\r\n    ;\r\n    // STY nn, X\r\n    Opcode[0x94] = function () {\r\n        RAM_1.RAM.write(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X, RAM_1.Register.Y);\r\n        return 4;\r\n    };\r\n    ;\r\n    // STA nn, X\r\n    Opcode[0x95] = function () {\r\n        RAM_1.RAM.write(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X, RAM_1.Register.A);\r\n        return 4;\r\n    };\r\n    ;\r\n    // STX nn, Y\r\n    Opcode[0x96] = function () {\r\n        RAM_1.RAM.write(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.Y, RAM_1.Register.X);\r\n        return 4;\r\n    };\r\n    ;\r\n    // TYA\r\n    Opcode[0x98] = function () {\r\n        RAM_1.Register.A = RAM_1.Register.Y;\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n        return 2;\r\n    };\r\n    ;\r\n    // STA nnnn, Y\r\n    Opcode[0x99] = function () {\r\n        RAM_1.RAM.write(this.next2BYTES() + RAM_1.Register.Y, RAM_1.Register.A);\r\n        return 5;\r\n    };\r\n    ;\r\n    // TXS\r\n    Opcode[0x9A] = function () {\r\n        RAM_1.Register.S = RAM_1.Register.X;\r\n        return 2;\r\n    };\r\n    ;\r\n    // STA nnnn, X\r\n    Opcode[0x9D] = function () {\r\n        RAM_1.RAM.write(this.next2BYTES() + RAM_1.Register.X, RAM_1.Register.A);\r\n        return 5;\r\n    };\r\n    ;\r\n    // LDY #nn\r\n    Opcode[0xA0] = function () {\r\n        this.LD('Y', ++RAM_1.Register.PC);\r\n        return 2;\r\n    };\r\n    ;\r\n    // LDA (nn, X)\r\n    Opcode[0xA1] = function () {\r\n        this.LD('A', this.WORD(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X));\r\n        return 6;\r\n    };\r\n    ;\r\n    // LDX #nn\r\n    Opcode[0xA2] = function () {\r\n        this.LD('X', ++RAM_1.Register.PC);\r\n        return 2;\r\n    };\r\n    ;\r\n    // LDY nn\r\n    Opcode[0xA4] = function () {\r\n        this.LD('Y', RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 3;\r\n    };\r\n    ;\r\n    // LDA nn\r\n    Opcode[0xA5] = function () {\r\n        this.LD('A', RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 3;\r\n    };\r\n    ;\r\n    // LDX nn\r\n    Opcode[0xA6] = function () {\r\n        this.LD('X', RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 3;\r\n    };\r\n    ;\r\n    // LAX nn\r\n    Opcode[0xA7] = function () {\r\n        RAM_1.Register.A = RAM_1.Register.X = RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n        return 3;\r\n    };\r\n    ;\r\n    // TAY\r\n    Opcode[0xA8] = function () {\r\n        RAM_1.Register.Y = RAM_1.Register.A;\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.Y);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.Y);\r\n        return 2;\r\n    };\r\n    ;\r\n    // LDA #nn\r\n    Opcode[0xA9] = function () {\r\n        this.LD('A', ++RAM_1.Register.PC);\r\n        return 2;\r\n    };\r\n    ;\r\n    // TAX\r\n    Opcode[0xAA] = function () {\r\n        RAM_1.Register.X = RAM_1.Register.A;\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.X);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.X);\r\n        return 2;\r\n    };\r\n    ;\r\n    // LDY nnnn\r\n    Opcode[0xAC] = function () {\r\n        this.LD('Y', this.next2BYTES());\r\n        return 4;\r\n    };\r\n    ;\r\n    // LDA nnnn\r\n    Opcode[0xAD] = function () {\r\n        this.LD('A', this.next2BYTES());\r\n        return 4;\r\n    };\r\n    ;\r\n    // LDX nnnn\r\n    Opcode[0xAE] = function () {\r\n        this.LD('X', this.next2BYTES());\r\n        return 4;\r\n    };\r\n    ;\r\n    // BCS/BGE nnn\r\n    Opcode[0xB0] = function () {\r\n        return this.CJMP('C', false);\r\n    };\r\n    ;\r\n    // LDA (nn), Y\r\n    Opcode[0xB1] = function () {\r\n        var address = this.WORD(RAM_1.RAM.get(++RAM_1.Register.PC)) + RAM_1.Register.Y;\r\n        this.LD('A', address);\r\n        return 5 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // LAX (nn), Y\r\n    Opcode[0xB3] = function () {\r\n        var address = this.WORD(RAM_1.RAM.get(++RAM_1.Register.PC)) + RAM_1.Register.Y;\r\n        RAM_1.Register.A = RAM_1.Register.X = RAM_1.RAM.read(address);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n        return 5 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // LDY nn, X\r\n    Opcode[0xB4] = function () {\r\n        this.LD('Y', RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X);\r\n        return 4;\r\n    };\r\n    ;\r\n    // LDA nn, X\r\n    Opcode[0xB5] = function () {\r\n        this.LD('A', RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X);\r\n        return 4;\r\n    };\r\n    ;\r\n    // LDX nn, Y\r\n    Opcode[0xB6] = function () {\r\n        this.LD('X', RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.Y);\r\n        return 4;\r\n    };\r\n    ;\r\n    // LAX nn, Y\r\n    Opcode[0xB7] = function () {\r\n        RAM_1.Register.A = RAM_1.Register.X = RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.Y);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A);\r\n        return 4;\r\n    };\r\n    ;\r\n    // CLV\r\n    Opcode[0xB8] = function () {\r\n        RAM_1.Flag.V = 0;\r\n        return 2;\r\n    };\r\n    ;\r\n    // LDA nnnn, Y\r\n    Opcode[0xB9] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.Y;\r\n        this.LD('A', address);\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // TSX\r\n    Opcode[0xBA] = function () {\r\n        RAM_1.Register.X = RAM_1.Register.S;\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.X);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.X);\r\n        return 2;\r\n    };\r\n    ;\r\n    // LDY nnnn, X\r\n    Opcode[0xBC] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.X;\r\n        this.LD('Y', address);\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // LDA nnnn, X\r\n    Opcode[0xBD] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.X;\r\n        this.LD('A', address);\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // LDX nnnn, Y\r\n    Opcode[0xBE] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.Y;\r\n        this.LD('X', address);\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // CPY #nn\r\n    Opcode[0xC0] = function () {\r\n        this.CMP('Y', RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 2;\r\n    };\r\n    ;\r\n    // NOP #nn\r\n    Opcode[0xC2] = function () {\r\n        return this[0x80]();\r\n    };\r\n    ;\r\n    // CPY nn\r\n    Opcode[0xC4] = function () {\r\n        this.CMP('Y', RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC)));\r\n        return 3;\r\n    };\r\n    ;\r\n    // CMP nn\r\n    Opcode[0xC5] = function () {\r\n        this.CMP('A', RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC)));\r\n        return 3;\r\n    };\r\n    ;\r\n    // DEC nn\r\n    Opcode[0xC6] = function () {\r\n        var address = RAM_1.RAM.get(++RAM_1.Register.PC);\r\n        var result = RAM_1.RAM.write(address, RAM_1.RAM.get(address) - 1);\r\n        RAM_1.Flag.Z = this.isZero(result);\r\n        RAM_1.Flag.N = this.isNegative(result);\r\n        return 5;\r\n    };\r\n    ;\r\n    // DCP op\r\n    Opcode[0xC7] = function () {\r\n        var address = RAM_1.RAM.get(++RAM_1.Register.PC);\r\n        var value = RAM_1.RAM.write(address, RAM_1.RAM.get(address) - 1);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.A - value);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.A - value);\r\n        RAM_1.Flag.C = (RAM_1.Register.A - value >= 0 ? 1 : 0);\r\n        return 5;\r\n    };\r\n    ;\r\n    // INY\r\n    Opcode[0xC8] = function () {\r\n        RAM_1.Register.Y = Common_1.Convert.toUint8(RAM_1.Register.Y + 1);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.Y);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.Y);\r\n        return 2;\r\n    };\r\n    ;\r\n    // CMP #nn\r\n    Opcode[0xC9] = function () {\r\n        this.CMP('A', RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 2;\r\n    };\r\n    ;\r\n    // DEX\r\n    Opcode[0xCA] = function () {\r\n        RAM_1.Register.X = Common_1.Convert.toUint8(RAM_1.Register.X - 1);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.X);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.X);\r\n        return 2;\r\n    };\r\n    ;\r\n    // AXS #nn\r\n    Opcode[0xCB] = function () {\r\n        var value = RAM_1.RAM.get(++RAM_1.Register.PC);\r\n        var and = RAM_1.Register.X & RAM_1.Register.A;\r\n        RAM_1.Register.X = Common_1.Convert.toUint8(and - value);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.X);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.X);\r\n        RAM_1.Flag.C = (and - value >= 0 ? 1 : 0);\r\n        return 2;\r\n    };\r\n    ;\r\n    // CPY nnnn\r\n    Opcode[0xCC] = function () {\r\n        this.CMP('Y', RAM_1.RAM.read(this.next2BYTES()));\r\n        return 4;\r\n    };\r\n    ;\r\n    // CMP nnnn\r\n    Opcode[0xCD] = function () {\r\n        this.CMP('A', RAM_1.RAM.read(this.next2BYTES()));\r\n        return 4;\r\n    };\r\n    ;\r\n    // BNE\r\n    Opcode[0xD0] = function () {\r\n        return this.CJMP('Z', true);\r\n    };\r\n    ;\r\n    // NOP nn, X\r\n    Opcode[0xD4] = function () {\r\n        return this[0x14]();\r\n    };\r\n    ;\r\n    // CMP nn, X\r\n    Opcode[0xD5] = function () {\r\n        this.CMP('A', RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X));\r\n        return 4;\r\n    };\r\n    ;\r\n    // DEC nn, X\r\n    Opcode[0xD6] = function () {\r\n        var address = RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X;\r\n        var result = RAM_1.RAM.write(address, RAM_1.RAM.get(address) - 1);\r\n        RAM_1.Flag.Z = this.isZero(result);\r\n        RAM_1.Flag.N = this.isNegative(result);\r\n        return 6;\r\n    };\r\n    ;\r\n    // CLD\r\n    Opcode[0xD8] = function () {\r\n        RAM_1.Flag.D = 0;\r\n        return 2;\r\n    };\r\n    ;\r\n    // CMP nnnn, Y\r\n    Opcode[0xD9] = function () {\r\n        var address = this.next2BYTES();\r\n        this.CMP('A', RAM_1.RAM.read(address + RAM_1.Register.Y));\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address + RAM_1.Register.Y) ? 1 : 0);\r\n    };\r\n    ;\r\n    // NOP nnnn, X\r\n    Opcode[0xDC] = function () {\r\n        return this[0x1C]();\r\n    };\r\n    ;\r\n    // CMP nnnn, X\r\n    Opcode[0xDD] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.X;\r\n        this.CMP('A', RAM_1.RAM.read(address));\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // CPX #nn\r\n    Opcode[0xE0] = function () {\r\n        this.CMP('X', RAM_1.RAM.get(++RAM_1.Register.PC));\r\n        return 2;\r\n    };\r\n    ;\r\n    // NOP #nn\r\n    Opcode[0xE2] = function () {\r\n        return this[0x80]();\r\n    };\r\n    ;\r\n    // CPX nn\r\n    Opcode[0xE4] = function () {\r\n        this.CMP('X', RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC)));\r\n        return 3;\r\n    };\r\n    ;\r\n    // SBC nn\r\n    Opcode[0xE5] = function () {\r\n        this.ADC(Common_1.Convert.toUint8(~RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC))));\r\n        return 3;\r\n    };\r\n    ;\r\n    // INC nn\r\n    Opcode[0xE6] = function () {\r\n        var address = RAM_1.RAM.get(++RAM_1.Register.PC);\r\n        var result = RAM_1.RAM.write(address, RAM_1.RAM.get(address) + 1);\r\n        RAM_1.Flag.Z = this.isZero(result);\r\n        RAM_1.Flag.N = this.isNegative(result);\r\n        return 5;\r\n    };\r\n    ;\r\n    // INX\r\n    Opcode[0xE8] = function () {\r\n        RAM_1.Register.X = Common_1.Convert.toUint8(RAM_1.Register.X + 1);\r\n        RAM_1.Flag.Z = this.isZero(RAM_1.Register.X);\r\n        RAM_1.Flag.N = this.isNegative(RAM_1.Register.X);\r\n        return 2;\r\n    };\r\n    ;\r\n    // SBC #nn\r\n    Opcode[0xE9] = function () {\r\n        this.ADC(Common_1.Convert.toUint8(~RAM_1.RAM.get(++RAM_1.Register.PC)));\r\n        return 2;\r\n    };\r\n    ;\r\n    // NOP\r\n    Opcode[0xEA] = function () {\r\n        return 2;\r\n    };\r\n    ;\r\n    // CPX nnnn\r\n    Opcode[0xEC] = function () {\r\n        this.CMP('X', RAM_1.RAM.read(this.next2BYTES()));\r\n        return 4;\r\n    };\r\n    ;\r\n    // BEQ/BZS nnn\r\n    Opcode[0xF0] = function () {\r\n        return this.CJMP('Z', false);\r\n    };\r\n    ;\r\n    // NOP nn, X\r\n    Opcode[0xF4] = function () {\r\n        return this[0x14]();\r\n    };\r\n    ;\r\n    // SBC nn, X\r\n    Opcode[0xF5] = function () {\r\n        this.ADC(Common_1.Convert.toUint8(~RAM_1.RAM.read(RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X)));\r\n        return 4;\r\n    };\r\n    ;\r\n    // INC nn, X\r\n    Opcode[0xF6] = function () {\r\n        var address = RAM_1.RAM.get(++RAM_1.Register.PC) + RAM_1.Register.X;\r\n        var result = RAM_1.RAM.write(address, RAM_1.RAM.get(address) + 1);\r\n        RAM_1.Flag.Z = this.isZero(result);\r\n        RAM_1.Flag.N = this.isNegative(result);\r\n        return 6;\r\n    };\r\n    ;\r\n    // SED\r\n    Opcode[0xF8] = function () {\r\n        RAM_1.Flag.D = 1;\r\n        return 2;\r\n    };\r\n    ;\r\n    // SBC nnnn, Y\r\n    Opcode[0xF9] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.Y;\r\n        this.ADC(Common_1.Convert.toUint8(~RAM_1.RAM.read(address)));\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    // NOP nnnn, X\r\n    Opcode[0xFC] = function () {\r\n        return this[0x1C]();\r\n    };\r\n    ;\r\n    // SBC nnnn, X\r\n    Opcode[0xFD] = function () {\r\n        var address = this.next2BYTES() + RAM_1.Register.X;\r\n        this.ADC(Common_1.Convert.toUint8(~RAM_1.RAM.read(address)));\r\n        return 4 + (this.isNextPage(RAM_1.Register.PC, address) ? 1 : 0);\r\n    };\r\n    ;\r\n    return Opcode;\r\n}());\r\nexports.Opcode = Opcode;\r\n;\r\n\n\n//# sourceURL=webpack://Atari2600/./dev/Opcode.ts?");

/***/ }),

/***/ "./dev/PIA.ts":
/*!********************!*\
  !*** ./dev/PIA.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RAM_1 = __webpack_require__(/*! ./RAM */ \"./dev/RAM.ts\");\r\nvar Common_1 = __webpack_require__(/*! ./Common */ \"./dev/Common.ts\");\r\n// TODO: Timer restart after reading from INTIM?\r\n// TODO: different control types\r\n// TODO: keyup - proper detection (limit to one later, etc)\r\nvar PIA = /** @class */ (function () {\r\n    function PIA() {\r\n    }\r\n    PIA.keydown = function (e) {\r\n        var key = e.keyCode;\r\n        var swcha = Common_1.Convert.toBin(RAM_1.RAM.swchaR).split('');\r\n        var swchb = Common_1.Convert.toBin(RAM_1.RAM.swchbR).split('');\r\n        var inpt4 = Common_1.Convert.toBin(RAM_1.RAM.get(0x3C)).split('');\r\n        var inpt5 = Common_1.Convert.toBin(RAM_1.RAM.get(0x3D)).split('');\r\n        if (key == 38) {\r\n            swcha[3] = '0';\r\n        }\r\n        else if (key == 39) {\r\n            swcha[0] = '0';\r\n        }\r\n        else if (key == 40) {\r\n            swcha[2] = '0';\r\n        }\r\n        else if (key == 37) {\r\n            swcha[1] = '0';\r\n        }\r\n        else if (key == 17) {\r\n            inpt4[0] = '0';\r\n        }\r\n        else if (key == 87) {\r\n            swcha[7] = '0';\r\n        }\r\n        else if (key == 65) {\r\n            swcha[5] = '0';\r\n        }\r\n        else if (key == 83) {\r\n            swcha[6] = '0';\r\n        }\r\n        else if (key == 68) {\r\n            swcha[4] = '0';\r\n        }\r\n        else if (key == 16) {\r\n            inpt5[0] = '0';\r\n        }\r\n        else if (key == 191) {\r\n            swchb[7] = (swchb[7] == '0' ? '1' : '0');\r\n        }\r\n        else if (key == 190) {\r\n            swchb[6] = (swchb[6] == '0' ? '1' : '0');\r\n        }\r\n        else if (key == 78) {\r\n            swchb[1] = (swchb[1] == '0' ? '1' : '0');\r\n        }\r\n        else if (key == 77) {\r\n            swchb[0] = (swchb[0] == '0' ? '1' : '0');\r\n        }\r\n        ;\r\n        RAM_1.RAM.swchaR = parseInt(swcha.join(''), 2);\r\n        RAM_1.RAM.swchbR = parseInt(swchb.join(''), 2);\r\n        RAM_1.RAM.set(0x3C, parseInt(inpt4.join(''), 2));\r\n        RAM_1.RAM.set(0x3D, parseInt(inpt5.join(''), 2));\r\n    };\r\n    ;\r\n    PIA.keyup = function (e) {\r\n        RAM_1.RAM.swchaR = 0xFF;\r\n        RAM_1.RAM.swchbR = 0xFF;\r\n        RAM_1.RAM.set(0x280, 0xFF);\r\n        RAM_1.RAM.set(0x3C, 0xFF);\r\n        RAM_1.RAM.set(0x3D, 0xFF);\r\n    };\r\n    ;\r\n    PIA.initInputs = function () {\r\n        document.addEventListener(\"keydown\", this.keydown, false);\r\n        document.addEventListener(\"keyup\", this.keyup, false);\r\n    };\r\n    ;\r\n    PIA.setTimer = function (address) {\r\n        this.timer = address;\r\n        this.cycle = this.timerIntervals[address];\r\n        RAM_1.RAM.set(0x284, RAM_1.RAM.get(address));\r\n    };\r\n    ;\r\n    PIA.tick = function () {\r\n        for (var i = 0x294; i <= 0x297; i++) {\r\n            if (this.timer != i) {\r\n                continue;\r\n            }\r\n            ;\r\n            if (this.timer && this.cycle == 0) {\r\n                var before_1 = RAM_1.RAM.get(0x284);\r\n                var after_1 = RAM_1.RAM.set(0x284, RAM_1.RAM.get(0x284) - 1);\r\n                ;\r\n                this.cycle = this.timerIntervals[i];\r\n                if (before_1 == 0 && after_1 == 0xFF) {\r\n                    this.prevTimer = i;\r\n                    this.timer = null;\r\n                    this.cycle = 0;\r\n                    RAM_1.RAM.set(0x285, 192);\r\n                }\r\n                ;\r\n            }\r\n            ;\r\n        }\r\n        ;\r\n        this.cycle--;\r\n    };\r\n    ;\r\n    PIA.prevTimer = null;\r\n    PIA.timer = null;\r\n    PIA.cycle = 0;\r\n    PIA.timerIntervals = {\r\n        0x294: 1,\r\n        0x295: 8,\r\n        0x296: 64,\r\n        0x297: 1024\r\n    };\r\n    return PIA;\r\n}());\r\nexports.PIA = PIA;\r\n;\r\n\n\n//# sourceURL=webpack://Atari2600/./dev/PIA.ts?");

/***/ }),

/***/ "./dev/RAM.ts":
/*!********************!*\
  !*** ./dev/RAM.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar PIA_1 = __webpack_require__(/*! ./PIA */ \"./dev/PIA.ts\");\r\nvar CPU_1 = __webpack_require__(/*! ./CPU */ \"./dev/CPU.ts\");\r\nvar Common_1 = __webpack_require__(/*! ./Common */ \"./dev/Common.ts\");\r\nvar TIA_1 = __webpack_require__(/*! ./TIA */ \"./dev/TIA.ts\");\r\nvar Register = /** @class */ (function () {\r\n    function Register() {\r\n    }\r\n    Register.A = 0; // Accumulator\r\n    Register.PC = 0xF000; // Program Counter\r\n    Register.S = 0xFF; // Stack Pointer\r\n    Register.X = 0; // Index Register X\r\n    Register.Y = 0; // Index Register Y\r\n    return Register;\r\n}());\r\nexports.Register = Register;\r\n;\r\nvar Flag = /** @class */ (function () {\r\n    function Flag() {\r\n    }\r\n    Flag.B = 0; // Break flag\r\n    Flag.C = 0; // Carry\r\n    Flag.D = 0; // Decimal mode\r\n    Flag.I = 0; // Interrupt disable bit\r\n    Flag.N = 0; // Negative/Sign\r\n    Flag.V = 0; // Overflow\r\n    Flag.Z = 0; // Zero\r\n    Flag.U = 0; // Unused flag\r\n    return Flag;\r\n}());\r\nexports.Flag = Flag;\r\n;\r\nvar RAM = /** @class */ (function () {\r\n    function RAM() {\r\n    }\r\n    RAM.get = function (address) {\r\n        return this.memory[address];\r\n    };\r\n    ;\r\n    RAM.read = function (address) {\r\n        var value = this.memory[address];\r\n        if (this[address] !== undefined) {\r\n            value = this[address]();\r\n        }\r\n        ;\r\n        return value;\r\n    };\r\n    ;\r\n    RAM.readRom = function (rom) {\r\n        var romSize = rom.length;\r\n        var original = rom;\r\n        for (var i = romSize; i < 0x1000; i += romSize) {\r\n            var old = rom;\r\n            rom = new Uint8Array(i + romSize);\r\n            rom.set(old, 0);\r\n            rom.set(original, i);\r\n        }\r\n        ;\r\n        this.reset();\r\n        this.memory = new Uint8Array(61440 + rom.length);\r\n        for (var i = 0x1000; i < 0xFFFF; i += 0x2000) {\r\n            this.memory.set(rom, i);\r\n        }\r\n        ;\r\n        // Reset vector\r\n        Register.PC = ((this.memory[0xFFFD] & 0xFF) << 8) | (this.memory[0xFFFC] & 0xFF);\r\n    };\r\n    ;\r\n    RAM.reset = function () {\r\n        this.memory = new Uint8Array(65536);\r\n    };\r\n    ;\r\n    RAM.set = function (address, value) {\r\n        this.memory[address] = value;\r\n        return this.memory[address];\r\n    };\r\n    ;\r\n    RAM.write = function (address, value) {\r\n        if (this[address] !== undefined) {\r\n            value = this[address](value);\r\n        }\r\n        ;\r\n        this.memory[address] = value;\r\n        return this.memory[address];\r\n    };\r\n    ;\r\n    // VSYNC write\r\n    RAM[0x00] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        if (Common_1.Convert.toBin(RAM.get(0x00)).charAt(6) == '0' && Common_1.Convert.toBin(value).charAt(6) == '1') {\r\n            TIA_1.TIA.scanline = 0;\r\n        }\r\n        ;\r\n        return value;\r\n    };\r\n    ;\r\n    // WSYNC write\r\n    RAM[0x02] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        CPU_1.CPU.lock();\r\n        return value;\r\n    };\r\n    ;\r\n    // NUSIZ0 write\r\n    RAM[0x04] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        var nusiz = Common_1.Convert.toBin(value).split('');\r\n        var playerValue = parseInt(nusiz[5] + nusiz[6] + nusiz[7], 2);\r\n        TIA_1.TIA.p0.pixelRange = TIA_1.TIA.getPixelRange(playerValue);\r\n        TIA_1.TIA.p0.size = (playerValue == 5 || playerValue == 7 ? (playerValue + 1) / 2 : 1);\r\n        TIA_1.TIA.m0.size = Math.pow(2, 2 * parseInt(nusiz[2]) + parseInt(nusiz[3]));\r\n        return value;\r\n    };\r\n    ;\r\n    // NUSIZ1 write\r\n    RAM[0x05] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        var nusiz = Common_1.Convert.toBin(value).split('');\r\n        var playerValue = parseInt(nusiz[5] + nusiz[6] + nusiz[7], 2);\r\n        TIA_1.TIA.p1.pixelRange = TIA_1.TIA.getPixelRange(playerValue);\r\n        TIA_1.TIA.p1.size = (playerValue == 5 || playerValue == 7 ? (playerValue + 1) / 2 : 1);\r\n        TIA_1.TIA.m1.size = Math.pow(2, 2 * parseInt(nusiz[2]) + parseInt(nusiz[3]));\r\n        return value;\r\n    };\r\n    ;\r\n    // COLUP0 write\r\n    RAM[0x06] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.pf.colup0 = TIA_1.TIA.p0.colup = TIA_1.TIA.m0.colup = TIA_1.TIA.color(Common_1.Convert.toBin(value));\r\n        return value;\r\n    };\r\n    ;\r\n    // COLUP1 write\r\n    RAM[0x07] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.pf.colup1 = TIA_1.TIA.p1.colup = TIA_1.TIA.m1.colup = TIA_1.TIA.color(Common_1.Convert.toBin(value));\r\n        return value;\r\n    };\r\n    ;\r\n    // COLUPF write\r\n    RAM[0x08] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.pf.colupf = TIA_1.TIA.ball.colupf = TIA_1.TIA.color(Common_1.Convert.toBin(value));\r\n        return value;\r\n    };\r\n    ;\r\n    // COLUBK write\r\n    RAM[0x09] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.bk.colubk = TIA_1.TIA.color(Common_1.Convert.toBin(value));\r\n        return value;\r\n    };\r\n    ;\r\n    // CTRLPF write\r\n    RAM[0x0A] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        var ctrlpf = Common_1.Convert.toBin(value).split('');\r\n        TIA_1.TIA.pf.ctrlpf = ctrlpf;\r\n        TIA_1.TIA.pf.reflect = (ctrlpf[7] == '1');\r\n        TIA_1.TIA.pf.scoreMode = (ctrlpf[6] == '1' && ctrlpf[5] == '0');\r\n        TIA_1.TIA.pfp = (ctrlpf[5] == '1');\r\n        TIA_1.TIA.ball.size = Math.pow(2, 2 * parseInt(ctrlpf[2]) + parseInt(ctrlpf[3]));\r\n        return value;\r\n    };\r\n    ;\r\n    // REFP0 write\r\n    RAM[0x0B] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.p0.refp = (Common_1.Convert.toBin(value).charAt(4) == '1');\r\n        return value;\r\n    };\r\n    ;\r\n    // REFP1 write\r\n    RAM[0x0C] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.p1.refp = (Common_1.Convert.toBin(value).charAt(4) == '1');\r\n        return value;\r\n    };\r\n    ;\r\n    // PF0 write\r\n    RAM[0x0D] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.pf.pf0 = Common_1.Convert.toBin(value).split('').reverse();\r\n        return value;\r\n    };\r\n    ;\r\n    // PF1 write\r\n    RAM[0x0E] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.pf.pf1 = Common_1.Convert.toBin(value).split('').reverse();\r\n        return value;\r\n    };\r\n    ;\r\n    // PF2 write\r\n    RAM[0x0F] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.pf.pf2 = Common_1.Convert.toBin(value).split('').reverse();\r\n        return value;\r\n    };\r\n    ;\r\n    // RESP0 write\r\n    RAM[0x10] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.p0.position = (TIA_1.TIA.clock <= 68 ? 3 : TIA_1.TIA.clock - 61);\r\n        return value;\r\n    };\r\n    ;\r\n    // RESP1 write\r\n    RAM[0x11] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.p1.position = (TIA_1.TIA.clock <= 68 ? 3 : TIA_1.TIA.clock - 61);\r\n        return value;\r\n    };\r\n    ;\r\n    // RESM0 write\r\n    RAM[0x12] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.m0.position = (TIA_1.TIA.clock <= 68 ? 2 : TIA_1.TIA.clock - 68);\r\n        return value;\r\n    };\r\n    ;\r\n    // RESM1 write\r\n    RAM[0x13] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.m1.position = (TIA_1.TIA.clock <= 68 ? 2 : TIA_1.TIA.clock - 68);\r\n        return value;\r\n    };\r\n    ;\r\n    // RESBL write\r\n    RAM[0x14] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.ball.position = (TIA_1.TIA.clock <= 68 ? 2 : TIA_1.TIA.clock - 68);\r\n        return value;\r\n    };\r\n    ;\r\n    // GRP0 write\r\n    RAM[0x1B] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.p1.prevGrp = TIA_1.TIA.p1.grp;\r\n        TIA_1.TIA.p0.grp = Common_1.Convert.toBin(value).split('');\r\n        return value;\r\n    };\r\n    ;\r\n    // GRP1 write\r\n    RAM[0x1C] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.p0.prevGrp = TIA_1.TIA.p0.grp;\r\n        TIA_1.TIA.ball.prevEnabl = TIA_1.TIA.ball.enabl;\r\n        TIA_1.TIA.p1.grp = Common_1.Convert.toBin(value).split('');\r\n        return value;\r\n    };\r\n    ;\r\n    // ENAM0 write\r\n    RAM[0x1D] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.m0.enam = (Common_1.Convert.toBin(value).charAt(6) == '1');\r\n        return value;\r\n    };\r\n    ;\r\n    // ENAM1 write\r\n    RAM[0x1E] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.m1.enam = (Common_1.Convert.toBin(value).charAt(6) == '1');\r\n        return value;\r\n    };\r\n    ;\r\n    // ENABL write\r\n    RAM[0x1F] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.ball.enabl = (Common_1.Convert.toBin(value).charAt(6) == '1');\r\n        return value;\r\n    };\r\n    ;\r\n    // HMP0 write\r\n    RAM[0x20] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        var bit = Common_1.Convert.toBin(value).split('');\r\n        TIA_1.TIA.p0.hmp = parseInt(bit[1] + bit[2] + bit[3], 2) - (bit[0] == '1' ? 8 : 0);\r\n        return value;\r\n    };\r\n    ;\r\n    // HMP1 write\r\n    RAM[0x21] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        var bit = Common_1.Convert.toBin(value).split('');\r\n        TIA_1.TIA.p1.hmp = parseInt(bit[1] + bit[2] + bit[3], 2) - (bit[0] == '1' ? 8 : 0);\r\n        return value;\r\n    };\r\n    ;\r\n    // HMM0 write\r\n    RAM[0x22] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        var bit = Common_1.Convert.toBin(value).split('');\r\n        TIA_1.TIA.m0.hmm = parseInt(bit[1] + bit[2] + bit[3], 2) - (bit[0] == '1' ? 8 : 0);\r\n        return value;\r\n    };\r\n    ;\r\n    // HMM1 write\r\n    RAM[0x23] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        var bit = Common_1.Convert.toBin(value).split('');\r\n        TIA_1.TIA.m1.hmm = parseInt(bit[1] + bit[2] + bit[3], 2) - (bit[0] == '1' ? 8 : 0);\r\n        return value;\r\n    };\r\n    ;\r\n    // HMBL write\r\n    RAM[0x24] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        var bit = Common_1.Convert.toBin(value).split('');\r\n        TIA_1.TIA.ball.hmbl = parseInt(bit[1] + bit[2] + bit[3], 2) - (bit[0] == '1' ? 8 : 0);\r\n        return value;\r\n    };\r\n    ;\r\n    // VDELP0 write\r\n    RAM[0x25] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.p0.vdelp = (Common_1.Convert.toBin(value).charAt(7) == '1');\r\n        return value;\r\n    };\r\n    ;\r\n    // VDELP1 write\r\n    RAM[0x26] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.p1.vdelp = (Common_1.Convert.toBin(value).charAt(7) == '1');\r\n        return value;\r\n    };\r\n    ;\r\n    // VDELBL write\r\n    RAM[0x27] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.ball.vdelbl = (Common_1.Convert.toBin(value).charAt(7) == '1');\r\n        return value;\r\n    };\r\n    ;\r\n    // HMOVE write\r\n    RAM[0x2A] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.p0.position = (TIA_1.TIA.p0.position - TIA_1.TIA.p0.hmp) % 160;\r\n        TIA_1.TIA.p1.position = (TIA_1.TIA.p1.position - TIA_1.TIA.p1.hmp) % 160;\r\n        TIA_1.TIA.m0.position = (TIA_1.TIA.m0.position - TIA_1.TIA.m0.hmm) % 160;\r\n        TIA_1.TIA.m1.position = (TIA_1.TIA.m1.position - TIA_1.TIA.m1.hmm) % 160;\r\n        TIA_1.TIA.ball.position = (TIA_1.TIA.ball.position - TIA_1.TIA.ball.hmbl) % 160;\r\n        return value;\r\n    };\r\n    ;\r\n    // HMCLR write\r\n    RAM[0x2B] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        TIA_1.TIA.p0.hmp = TIA_1.TIA.p1.hmp = TIA_1.TIA.m0.hmm = TIA_1.TIA.m1.hmm = TIA_1.TIA.ball.hmbl = 0;\r\n        return value;\r\n    };\r\n    ;\r\n    // SWCHA read/write\r\n    RAM[0x280] = function (value) {\r\n        if (value) {\r\n            this.swchaW = value;\r\n            return value;\r\n        }\r\n        ;\r\n        var swacnt = Common_1.Convert.toBin(this.memory[0x281]).split('');\r\n        var bin = Common_1.Convert.toBin(this.swchaR).split('');\r\n        var result = Common_1.Convert.toBin(this.swchaR).split('');\r\n        for (var i = 0; i < 8; i++) {\r\n            if (swacnt[i] == '1') {\r\n                result[i] = bin[i];\r\n            }\r\n            ;\r\n        }\r\n        ;\r\n        return parseInt(result.join(''), 2);\r\n    };\r\n    ;\r\n    // SWCHB read/write\r\n    RAM[0x282] = function (value) {\r\n        if (value) {\r\n            this.swchbW = value;\r\n            return value;\r\n        }\r\n        ;\r\n        var swbcnt = Common_1.Convert.toBin(this.memory[0x283]).split('');\r\n        var bin = Common_1.Convert.toBin(this.swchbW).split('');\r\n        var result = Common_1.Convert.toBin(this.swchbR).split('');\r\n        for (var i = 0; i < 8; i++) {\r\n            if (swbcnt[i] == '1') {\r\n                result[i] = bin[i];\r\n            }\r\n            ;\r\n        }\r\n        ;\r\n        return parseInt(result.join(''), 2);\r\n    };\r\n    ;\r\n    RAM[0x284] = function () {\r\n        if (!PIA_1.PIA.timer) {\r\n            PIA_1.PIA.timer = PIA_1.PIA.prevTimer || 0x296;\r\n            PIA_1.PIA.cycle = PIA_1.PIA.timerIntervals[PIA_1.PIA.prevTimer || 0x296];\r\n        }\r\n        ;\r\n        return this.memory[0x284];\r\n    };\r\n    ;\r\n    // INSTAT read\r\n    RAM[0x285] = function () {\r\n        var bits = Common_1.Convert.toBin(this.memory[0x285]).split('');\r\n        bits[1] = '0';\r\n        this.memory[0x285] = parseInt(bits.join(''), 2);\r\n        return this.memory[0x285];\r\n    };\r\n    ;\r\n    // TIM1T write\r\n    RAM[0x294] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        var bits = Common_1.Convert.toBin(this.memory[0x285]).split('');\r\n        value = new Uint8Array([value - 1])[0];\r\n        bits[0] = '0';\r\n        this.memory[0x294] = value;\r\n        PIA_1.PIA.setTimer(0x294);\r\n        return value;\r\n    };\r\n    ;\r\n    // TIM8T write\r\n    RAM[0x295] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        var bits = Common_1.Convert.toBin(this.memory[0x285]).split('');\r\n        value = new Uint8Array([value - 1])[0];\r\n        bits[0] = '0';\r\n        this.memory[0x295] = value;\r\n        PIA_1.PIA.setTimer(0x295);\r\n        return value;\r\n    };\r\n    ;\r\n    // TIM64T write\r\n    RAM[0x296] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        var bits = Common_1.Convert.toBin(this.memory[0x285]).split('');\r\n        value = new Uint8Array([value - 1])[0];\r\n        bits[0] = '0';\r\n        this.memory[0x296] = value;\r\n        PIA_1.PIA.setTimer(0x296);\r\n        return value;\r\n    };\r\n    ;\r\n    // TIM1024T write\r\n    RAM[0x297] = function (value) {\r\n        if (value === undefined)\r\n            return;\r\n        var bits = Common_1.Convert.toBin(this.memory[0x285]).split('');\r\n        value = new Uint8Array([value - 1])[0];\r\n        bits[0] = '0';\r\n        this.memory[0x297] = value;\r\n        PIA_1.PIA.setTimer(0x297);\r\n        return value;\r\n    };\r\n    ;\r\n    RAM.memory = new Uint8Array(65536);\r\n    RAM.swchaW = 0x00;\r\n    RAM.swchaR = 0xFF;\r\n    RAM.swchbW = 0x00;\r\n    RAM.swchbR = 0x3F;\r\n    return RAM;\r\n}());\r\nexports.RAM = RAM;\r\n;\r\n\n\n//# sourceURL=webpack://Atari2600/./dev/RAM.ts?");

/***/ }),

/***/ "./dev/RomReader.ts":
/*!**************************!*\
  !*** ./dev/RomReader.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RomReader = /** @class */ (function () {\r\n    function RomReader(file, callback) {\r\n        this.reader = new FileReader();\r\n        this.onRomLoadEnd = this.onRomLoadEnd.bind(this);\r\n        this.callback = callback;\r\n        this.reader.onloadend = this.onRomLoadEnd;\r\n        this.reader.readAsArrayBuffer(file);\r\n    }\r\n    ;\r\n    RomReader.prototype.onRomLoadEnd = function (evt) {\r\n        this.callback(new Uint8Array(evt.target.result));\r\n    };\r\n    ;\r\n    return RomReader;\r\n}());\r\nexports.RomReader = RomReader;\r\n;\r\n\n\n//# sourceURL=webpack://Atari2600/./dev/RomReader.ts?");

/***/ }),

/***/ "./dev/TIA.ts":
/*!********************!*\
  !*** ./dev/TIA.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CPU_1 = __webpack_require__(/*! ./CPU */ \"./dev/CPU.ts\");\r\n;\r\nvar GameObject = /** @class */ (function () {\r\n    function GameObject() {\r\n        this._canvas = null;\r\n        this._ctx = null;\r\n        this._imageData = null;\r\n        this._canvas = document.createElement('canvas');\r\n        this._canvas.width = 160;\r\n        this._canvas.height = 222;\r\n        this._ctx = this._canvas.getContext('2d');\r\n        this._imageData = this._ctx.getImageData(0, 0, this._canvas.width, this._canvas.height);\r\n    }\r\n    Object.defineProperty(GameObject.prototype, \"canvas\", {\r\n        get: function () {\r\n            this._ctx.putImageData(this._imageData, 0, 0);\r\n            this._imageData = this._ctx.createImageData(this._canvas.width, this._canvas.height);\r\n            return this._canvas;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ;\r\n    ;\r\n    GameObject.prototype.setImageData = function (scanline, clock, color) {\r\n        var pixelindex = (scanline * this._canvas.width + clock) << 2;\r\n        this._imageData.data[pixelindex] = color[0];\r\n        this._imageData.data[pixelindex + 1] = color[1];\r\n        this._imageData.data[pixelindex + 2] = color[2];\r\n        this._imageData.data[pixelindex + 3] = 255;\r\n        return this._imageData;\r\n    };\r\n    ;\r\n    return GameObject;\r\n}());\r\n;\r\nvar Background = /** @class */ (function (_super) {\r\n    __extends(Background, _super);\r\n    function Background() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.colubk = [0, 0, 0];\r\n        return _this;\r\n    }\r\n    Background.prototype.pixel = function (scanline, clock) {\r\n        return this.setImageData(scanline, clock, this.colubk);\r\n    };\r\n    ;\r\n    return Background;\r\n}(GameObject));\r\n;\r\nvar Playfield = /** @class */ (function (_super) {\r\n    __extends(Playfield, _super);\r\n    function Playfield() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.reflect = false;\r\n        _this.ctrlpf = ['0', '0', '0', '0', '0', '0', '0', '0'];\r\n        _this.colupf = [0, 0, 0];\r\n        _this.scoreMode = false;\r\n        _this.colup0 = [0, 0, 0];\r\n        _this.colup1 = [0, 0, 0];\r\n        _this.pf0 = ['0', '0', '0', '0', '0', '0', '0', '0'];\r\n        _this.pf1 = ['0', '0', '0', '0', '0', '0', '0', '0'];\r\n        _this.pf2 = ['0', '0', '0', '0', '0', '0', '0', '0'];\r\n        return _this;\r\n    }\r\n    Playfield.prototype.pixel = function (scanline, clock) {\r\n        var c = null;\r\n        if (clock <= 16) {\r\n            for (var i = 4; i <= 16; i += 4) {\r\n                if (clock <= i) {\r\n                    if (this.pf0[4 + (i / 4) - 1] == '1') {\r\n                        c = (this.scoreMode ? this.colup0 : this.colupf);\r\n                    }\r\n                    ;\r\n                    break;\r\n                }\r\n                ;\r\n            }\r\n            ;\r\n        }\r\n        else if (clock > 16 && clock <= 48) {\r\n            for (var i = 20; i <= 48; i += 4) {\r\n                if (clock <= i) {\r\n                    if (this.pf1[7 - (i / 4 - 5)] == '1') {\r\n                        c = (this.scoreMode ? this.colup0 : this.colupf);\r\n                    }\r\n                    ;\r\n                    break;\r\n                }\r\n                ;\r\n            }\r\n            ;\r\n        }\r\n        else if (clock > 48 && clock <= 80) {\r\n            for (var i = 52; i <= 80; i += 4) {\r\n                if (clock <= i) {\r\n                    if (this.pf2[0 + (i / 4 - 13)] == '1') {\r\n                        c = (this.scoreMode ? this.colup0 : this.colupf);\r\n                    }\r\n                    ;\r\n                    break;\r\n                }\r\n                ;\r\n            }\r\n            ;\r\n        }\r\n        else if (clock > 80 && clock <= 96 && !this.reflect) {\r\n            for (var i = 84; i <= 96; i += 4) {\r\n                if (clock <= i) {\r\n                    if (this.pf0[4 + (i / 4) - 21] == '1') {\r\n                        c = (this.scoreMode ? this.colup1 : this.colupf);\r\n                    }\r\n                    ;\r\n                    break;\r\n                }\r\n                ;\r\n            }\r\n            ;\r\n        }\r\n        else if (clock > 96 && clock <= 128 && !this.reflect) {\r\n            for (var i = 100; i <= 128; i += 4) {\r\n                if (clock <= i) {\r\n                    if (this.pf1[7 - (i / 4 - 25)] == '1') {\r\n                        c = (this.scoreMode ? this.colup1 : this.colupf);\r\n                    }\r\n                    ;\r\n                    break;\r\n                }\r\n                ;\r\n            }\r\n            ;\r\n        }\r\n        else if (clock > 128 && clock <= 160 && !this.reflect) {\r\n            for (var i = 132; i <= 160; i += 4) {\r\n                if (clock <= i) {\r\n                    if (this.pf2[0 + (i / 4 - 33)] == '1') {\r\n                        c = (this.scoreMode ? this.colup1 : this.colupf);\r\n                    }\r\n                    ;\r\n                    break;\r\n                }\r\n                ;\r\n            }\r\n            ;\r\n        }\r\n        else if (clock > 80 && clock <= 112 && this.reflect) {\r\n            for (var i = 84; i <= 112; i += 4) {\r\n                if (clock <= i) {\r\n                    if (this.pf2[7 - (i / 4 - 21)] == '1') {\r\n                        c = (this.scoreMode ? this.colup1 : this.colupf);\r\n                    }\r\n                    ;\r\n                    break;\r\n                }\r\n                ;\r\n            }\r\n            ;\r\n        }\r\n        else if (clock > 112 && clock <= 144 && this.reflect) {\r\n            for (var i = 116; i <= 144; i += 4) {\r\n                if (clock <= i) {\r\n                    if (this.pf1[0 + (i / 4 - 29)] == '1') {\r\n                        c = (this.scoreMode ? this.colup1 : this.colupf);\r\n                    }\r\n                    ;\r\n                    break;\r\n                }\r\n                ;\r\n            }\r\n            ;\r\n        }\r\n        else if (clock > 144 && clock <= 160 && this.reflect) {\r\n            for (var i = 148; i <= 160; i += 4) {\r\n                if (clock <= i) {\r\n                    if (this.pf0[7 - (i / 4 - 37)] == '1') {\r\n                        c = (this.scoreMode ? this.colup1 : this.colupf);\r\n                    }\r\n                    ;\r\n                    break;\r\n                }\r\n                ;\r\n            }\r\n            ;\r\n        }\r\n        ;\r\n        return (c ? this.setImageData(scanline, clock, c) : null);\r\n    };\r\n    ;\r\n    return Playfield;\r\n}(GameObject));\r\n;\r\nvar Ball = /** @class */ (function (_super) {\r\n    __extends(Ball, _super);\r\n    function Ball() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.colupf = [0, 0, 0];\r\n        _this.prevEnabl = false;\r\n        _this.enabl = false;\r\n        _this.hmbl = 0;\r\n        _this.position = null;\r\n        _this.size = 1;\r\n        _this.vdelbl = false;\r\n        return _this;\r\n    }\r\n    Ball.prototype.pixel = function (scanline, clock) {\r\n        if ((this.vdelbl ? this.prevEnabl : this.enabl) && clock >= this.position && clock < this.position + this.size) {\r\n            return this.setImageData(scanline, clock, this.colupf);\r\n        }\r\n        ;\r\n    };\r\n    ;\r\n    return Ball;\r\n}(GameObject));\r\n;\r\nvar Missile = /** @class */ (function (_super) {\r\n    __extends(Missile, _super);\r\n    function Missile(missile) {\r\n        var _this = _super.call(this) || this;\r\n        _this.colup = [0, 0, 0];\r\n        _this.missile = 0;\r\n        _this.hmm = 0;\r\n        _this.enam = false;\r\n        _this.size = 0;\r\n        _this.position = null;\r\n        _this.missile = missile;\r\n        return _this;\r\n    }\r\n    ;\r\n    Missile.prototype.pixel = function (scanline, clock) {\r\n        if (this.enam && clock >= this.position && clock < this.position + this.size) {\r\n            return this.setImageData(scanline, clock, this.colup);\r\n        }\r\n        ;\r\n    };\r\n    ;\r\n    return Missile;\r\n}(GameObject));\r\n;\r\nvar Player = /** @class */ (function (_super) {\r\n    __extends(Player, _super);\r\n    function Player(player) {\r\n        if (player === void 0) { player = 0; }\r\n        var _this = _super.call(this) || this;\r\n        _this.colup = [0, 0, 0];\r\n        _this.grp = ['0', '0', '0', '0', '0', '0', '0', '0'];\r\n        _this.prevGrp = ['0', '0', '0', '0', '0', '0', '0', '0'];\r\n        _this.hmp = 0;\r\n        _this.nusiz = 0;\r\n        _this.player = 0;\r\n        _this.position = null;\r\n        _this.refp = false;\r\n        _this.vdelp = false;\r\n        _this.pixelRange = [0];\r\n        _this.size = 1;\r\n        _this.player = player;\r\n        _this.position = 80 * player;\r\n        return _this;\r\n    }\r\n    ;\r\n    Player.prototype.pixel = function (scanline, clock) {\r\n        var grp = (this.vdelp ? this.prevGrp : (this.grp));\r\n        var index = (((clock - this.position) / this.size) >> 0) % 8;\r\n        index = (this.refp ? 7 - index : index);\r\n        for (var _i = 0, _a = this.pixelRange; _i < _a.length; _i++) {\r\n            var p = _a[_i];\r\n            var startingPosition = this.position + p;\r\n            if (clock >= startingPosition && clock < (startingPosition + 8) && grp[index] == '1') {\r\n                return this.setImageData(scanline, clock, this.colup);\r\n            }\r\n            ;\r\n        }\r\n        ;\r\n    };\r\n    ;\r\n    return Player;\r\n}(GameObject));\r\n;\r\nvar TIA = /** @class */ (function () {\r\n    function TIA() {\r\n    }\r\n    TIA.color = function (val) {\r\n        return this.colorPalette.get(val.slice(0, -1));\r\n    };\r\n    ;\r\n    Object.defineProperty(TIA, \"canvas\", {\r\n        set: function (canvas) {\r\n            this._canvas = canvas;\r\n            this._canvas.width = 160;\r\n            this._canvas.height = 222;\r\n            this.ctx = canvas.getContext('2d');\r\n            this.ctx.fillStyle = '#000';\r\n            this.ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\r\n            this.imageData = this.ctx.getImageData(0, 0, this._canvas.width, this._canvas.height);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ;\r\n    TIA.draw = function () {\r\n        if (this.pfp) {\r\n            this.ctx.drawImage(this.bk.canvas, 0, 0);\r\n            this.ctx.drawImage(this.p1.canvas, 0, 0);\r\n            this.ctx.drawImage(this.m1.canvas, 0, 0);\r\n            this.ctx.drawImage(this.p0.canvas, 0, 0);\r\n            this.ctx.drawImage(this.m0.canvas, 0, 0);\r\n            this.ctx.drawImage(this.pf.canvas, 0, 0);\r\n            this.ctx.drawImage(this.ball.canvas, 0, 0);\r\n            return;\r\n        }\r\n        ;\r\n        this.ctx.drawImage(this.bk.canvas, 0, 0);\r\n        this.ctx.drawImage(this.pf.canvas, 0, 0);\r\n        this.ctx.drawImage(this.ball.canvas, 0, 0);\r\n        this.ctx.drawImage(this.p0.canvas, 0, 0);\r\n        this.ctx.drawImage(this.m0.canvas, 0, 0);\r\n        this.ctx.drawImage(this.p1.canvas, 0, 0);\r\n        this.ctx.drawImage(this.m1.canvas, 0, 0);\r\n    };\r\n    ;\r\n    TIA.nextFrame = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            var scanline = 0;\r\n            while (scanline < 262) {\r\n                for (_this.clock = 0; _this.clock < 68; _this.clock += 3) {\r\n                    CPU_1.CPU.pulse();\r\n                }\r\n                ;\r\n                var counter = 2;\r\n                for (_this.clock = 68; _this.clock < 228; _this.clock += 1) {\r\n                    if (counter > 2) {\r\n                        counter = 0;\r\n                        CPU_1.CPU.pulse();\r\n                    }\r\n                    ;\r\n                    counter++;\r\n                    if (_this.scanline > 30 && _this.scanline < 252) {\r\n                        _this.pixel(_this.scanline - 30, _this.clock - 68);\r\n                    }\r\n                    ;\r\n                }\r\n                ;\r\n                CPU_1.CPU.unlock();\r\n                scanline++;\r\n                _this.scanline++;\r\n            }\r\n            ;\r\n            _this.draw();\r\n            resolve(true);\r\n        });\r\n    };\r\n    ;\r\n    TIA.pixel = function (scanline, clock) {\r\n        this.bk.pixel(scanline, clock);\r\n        this.pf.pixel(scanline, clock);\r\n        this.p0.pixel(scanline, clock);\r\n        this.p1.pixel(scanline, clock);\r\n        this.m0.pixel(scanline, clock);\r\n        this.m1.pixel(scanline, clock);\r\n        this.ball.pixel(scanline, clock);\r\n    };\r\n    ;\r\n    TIA.getPixelRange = function (value) {\r\n        var range = [0];\r\n        switch (value) {\r\n            case 1:\r\n                range = [0, 16];\r\n                break;\r\n            case 2:\r\n                range = [0, 32];\r\n                break;\r\n            case 3:\r\n                range = [0, 16, 32];\r\n                break;\r\n            case 4:\r\n                range = [0, 72];\r\n                break;\r\n            case 5:\r\n                range = [0, 8];\r\n                break;\r\n            case 6:\r\n                range = [0, 32, 72];\r\n                break;\r\n            case 7:\r\n                range = [0, 8, 16, 24];\r\n                break;\r\n        }\r\n        ;\r\n        return range;\r\n    };\r\n    ;\r\n    TIA.colorPalette = new Map([\r\n        ['0000000', [0, 0, 0]],\r\n        ['0000001', [26, 26, 26]],\r\n        ['0000010', [57, 57, 57]],\r\n        ['0000011', [91, 91, 91]],\r\n        ['0000100', [126, 126, 126]],\r\n        ['0000101', [162, 162, 162]],\r\n        ['0000110', [199, 199, 199]],\r\n        ['0000111', [237, 237, 237]],\r\n        ['0001000', [25, 2, 0]],\r\n        ['0001001', [58, 31, 0]],\r\n        ['0001010', [93, 65, 0]],\r\n        ['0001011', [130, 100, 0]],\r\n        ['0001100', [167, 136, 0]],\r\n        ['0001101', [204, 172, 0]],\r\n        ['0001110', [242, 210, 25]],\r\n        ['0001111', [254, 250, 64]],\r\n        ['0010000', [55, 0, 0]],\r\n        ['0010001', [94, 8, 0]],\r\n        ['0010010', [131, 39, 0]],\r\n        ['0010011', [169, 73, 0]],\r\n        ['0010100', [207, 108, 0]],\r\n        ['0010101', [245, 143, 23]],\r\n        ['0010110', [254, 180, 56]],\r\n        ['0010111', [254, 223, 111]],\r\n        ['0011000', [71, 0, 0]],\r\n        ['0011001', [115, 0, 0]],\r\n        ['0011010', [152, 19, 0]],\r\n        ['0011011', [190, 50, 22]],\r\n        ['0011100', [228, 83, 53]],\r\n        ['0011101', [254, 118, 87]],\r\n        ['0011110', [254, 156, 129]],\r\n        ['0011111', [254, 198, 187]],\r\n        ['0100000', [68, 0, 8]],\r\n        ['0100001', [111, 0, 31]],\r\n        ['0100010', [150, 6, 64]],\r\n        ['0100011', [187, 36, 98]],\r\n        ['0100100', [225, 69, 133]],\r\n        ['0100101', [254, 103, 170]],\r\n        ['0100110', [254, 140, 214]],\r\n        ['0100111', [254, 183, 246]],\r\n        ['0101000', [45, 0, 74]],\r\n        ['0101001', [87, 0, 103]],\r\n        ['0101010', [125, 5, 140]],\r\n        ['0101011', [161, 34, 177]],\r\n        ['0101100', [199, 67, 215]],\r\n        ['0101101', [237, 101, 254]],\r\n        ['0101110', [254, 138, 246]],\r\n        ['0101111', [254, 181, 247]],\r\n        ['0110000', [13, 0, 130]],\r\n        ['0110001', [51, 0, 162]],\r\n        ['0110010', [85, 15, 201]],\r\n        ['0110011', [120, 45, 240]],\r\n        ['0110100', [156, 78, 254]],\r\n        ['0110101', [195, 114, 254]],\r\n        ['0110110', [235, 152, 254]],\r\n        ['0110111', [254, 192, 249]],\r\n        ['0111000', [0, 0, 145]],\r\n        ['0111001', [10, 5, 189]],\r\n        ['0111010', [40, 34, 228]],\r\n        ['0111011', [72, 66, 254]],\r\n        ['0111100', [107, 100, 254]],\r\n        ['0111101', [144, 138, 254]],\r\n        ['0111110', [183, 176, 254]],\r\n        ['0111111', [223, 216, 254]],\r\n        ['1000000', [0, 0, 114]],\r\n        ['1000001', [0, 28, 171]],\r\n        ['1000010', [3, 60, 214]],\r\n        ['1000011', [32, 94, 253]],\r\n        ['1000100', [64, 129, 254]],\r\n        ['1000101', [100, 166, 254]],\r\n        ['1000110', [137, 206, 254]],\r\n        ['1000111', [176, 246, 254]],\r\n        ['1001000', [0, 16, 58]],\r\n        ['1001001', [0, 49, 110]],\r\n        ['1001010', [0, 85, 162]],\r\n        ['1001011', [5, 121, 200]],\r\n        ['1001100', [35, 157, 238]],\r\n        ['1001101', [68, 194, 254]],\r\n        ['1001110', [104, 233, 254]],\r\n        ['1001111', [143, 254, 254]],\r\n        ['1010000', [0, 31, 2]],\r\n        ['1010001', [0, 67, 38]],\r\n        ['1010010', [0, 105, 87]],\r\n        ['1010011', [0, 141, 122]],\r\n        ['1010100', [27, 177, 158]],\r\n        ['1010101', [59, 215, 195]],\r\n        ['1010110', [93, 254, 233]],\r\n        ['1010111', [134, 254, 254]],\r\n        ['1011000', [0, 36, 3]],\r\n        ['1011001', [0, 74, 5]],\r\n        ['1011010', [0, 112, 12]],\r\n        ['1011011', [9, 149, 43]],\r\n        ['1011100', [40, 186, 76]],\r\n        ['1011101', [73, 224, 110]],\r\n        ['1011110', [108, 254, 146]],\r\n        ['1011111', [151, 254, 181]],\r\n        ['1100000', [0, 33, 2]],\r\n        ['1100001', [0, 70, 4]],\r\n        ['1100010', [8, 107, 0]],\r\n        ['1100011', [40, 144, 0]],\r\n        ['1100100', [73, 181, 9]],\r\n        ['1100101', [107, 219, 40]],\r\n        ['1100110', [143, 254, 73]],\r\n        ['1100111', [187, 254, 105]],\r\n        ['1101000', [0, 21, 1]],\r\n        ['1101001', [16, 54, 0]],\r\n        ['1101010', [48, 89, 0]],\r\n        ['1101011', [83, 126, 0]],\r\n        ['1101100', [118, 163, 0]],\r\n        ['1101101', [154, 200, 0]],\r\n        ['1101110', [191, 238, 30]],\r\n        ['1101111', [232, 254, 62]],\r\n        ['1110000', [26, 2, 0]],\r\n        ['1110001', [59, 31, 0]],\r\n        ['1110010', [94, 65, 0]],\r\n        ['1110011', [131, 100, 0]],\r\n        ['1110100', [168, 136, 0]],\r\n        ['1110101', [206, 173, 0]],\r\n        ['1110110', [244, 210, 24]],\r\n        ['1110111', [254, 250, 64]],\r\n        ['1111000', [56, 0, 0]],\r\n        ['1111001', [95, 8, 0]],\r\n        ['1111010', [132, 39, 0]],\r\n        ['1111011', [170, 73, 0]],\r\n        ['1111100', [208, 107, 0]],\r\n        ['1111101', [246, 143, 24]],\r\n        ['1111110', [254, 180, 57]],\r\n        ['1111111', [254, 223, 112]] // #FEDF70\r\n    ]);\r\n    TIA._canvas = null;\r\n    TIA.ball = new Ball();\r\n    TIA.bk = new Background();\r\n    TIA.ctx = null;\r\n    TIA.clock = 0;\r\n    TIA.imageData = null;\r\n    TIA.expectNewFrame = false;\r\n    TIA.m0 = new Missile(0);\r\n    TIA.m1 = new Missile(1);\r\n    TIA.nusiz0 = ['0', '0', '0', '0', '0', '0', '0', '0'];\r\n    TIA.nusiz1 = ['0', '0', '0', '0', '0', '0', '0', '0'];\r\n    TIA.p0 = new Player(0);\r\n    TIA.p1 = new Player(1);\r\n    TIA.pf = new Playfield();\r\n    TIA.pfp = false;\r\n    TIA.scanline = 0;\r\n    return TIA;\r\n}());\r\nexports.TIA = TIA;\r\n;\r\n\n\n//# sourceURL=webpack://Atari2600/./dev/TIA.ts?");

/***/ })

/******/ });